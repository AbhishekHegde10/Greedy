#include <bits/stdc++.h> 
void merge(vector<int>&nums,int beg,int mid,int end)
    {
      vector<int>temp;
      int left=beg;
      int right=mid+1;
     
     while(left<=mid && right<=end)
     {
         if(nums[left]<=nums[right])
         {
             temp.push_back(nums[left]);
             left++;
         }
         else
         {
             temp.push_back(nums[right]);
             right++;
         }
     }
     while(left<=mid)
     {
         temp.push_back(nums[left]);
         left++;
     }
     while(right<=end)
     {
         temp.push_back(nums[right]);
         right++;
     }
     
     for(int i=beg;i<=end;i++)
     {
         nums[i]=temp[i-beg];
     }
     
    }
    int counts(vector<int>&nums,int beg,int mid,int end)
    {   int right=mid+1;
        int count=0;
        for(int i=beg;i<=mid;i++){
            while(right<=end && nums[i]>2*nums[right]) right++;
            count+=(right-(mid+1));
        }
        return count;

    }

    int mergesort(vector<int>&nums,int beg,int end)
    {   int count=0;
        if(beg>=end) return count;
        int mid=(beg+end)/2;
        count+=mergesort(nums,beg,mid);
        count+=mergesort(nums,mid+1,end);
        count+=counts(nums,beg,mid,end);
        merge(nums,beg,mid,end);
        return count;
    }
int reversePairs(vector<int> &arr, int n){
	return mergesort(arr,0,n-1);
}
